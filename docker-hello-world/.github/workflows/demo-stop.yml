name: 🛑 Stop Demo

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Demo environment to stop'
        required: true
        default: 'demo'
        type: choice
        options:
        - demo
        - dev
        - prod
      stop_method:
        description: 'How to stop the demo'
        required: true
        default: 'scale_down'
        type: choice
        options:
        - scale_down
        - destroy_all
      preserve_data:
        description: 'Create database backup before stopping?'
        required: true
        default: true
        type: boolean

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.6.0

jobs:
  stop-demo:
    name: Stop Demo Environment
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Initialize Terraform
      working-directory: infrastructure
      run: |
        echo "🚀 Initializing Terraform..."
        terraform init

    - name: Get current infrastructure state
      id: current-state
      working-directory: infrastructure
      run: |
        echo "📊 Getting current infrastructure information..."
        
        # Get database instance ID from Terraform state
        DB_INSTANCE_ID=$(terraform state show 'module.database.aws_db_instance.main' 2>/dev/null | grep "^[[:space:]]*id[[:space:]]*=" | cut -d'"' -f2 || echo "")
        echo "db-instance-id=$DB_INSTANCE_ID" >> $GITHUB_OUTPUT
        
        # Get cluster name from Terraform state
        CLUSTER_NAME=$(terraform state show 'module.ecs.aws_ecs_cluster.main' 2>/dev/null | grep "^[[:space:]]*name[[:space:]]*=" | cut -d'"' -f2 || echo "")
        echo "cluster-name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
        
        echo "Found infrastructure:"
        echo "- Database: $DB_INSTANCE_ID"
        echo "- ECS Cluster: $CLUSTER_NAME"

    - name: Create database snapshot (if preserving data)
      if: github.event.inputs.preserve_data == 'true' && steps.current-state.outputs.db-instance-id != ''
      run: |
        DB_INSTANCE_ID="${{ steps.current-state.outputs.db-instance-id }}"
        SNAPSHOT_ID="guestbook-snapshot-${{ github.event.inputs.environment }}-$(date +%Y%m%d-%H%M%S)"
        
        echo "📸 Creating database snapshot..."
        echo "Database: $DB_INSTANCE_ID"
        echo "Snapshot: $SNAPSHOT_ID"
        
        # Check database status
        DB_STATUS=$(aws rds describe-db-instances \
          --db-instance-identifier "$DB_INSTANCE_ID" \
          --query 'DBInstances[0].DBInstanceStatus' --output text 2>/dev/null || echo "not-found")
        
        if [ "$DB_STATUS" = "available" ]; then
          echo "✅ Creating database snapshot..."
          aws rds create-db-snapshot \
            --db-instance-identifier "$DB_INSTANCE_ID" \
            --db-snapshot-identifier "$SNAPSHOT_ID"
          
          echo "✅ Database snapshot created: $SNAPSHOT_ID"
          echo "💾 Your data is safely preserved!"
        else
          echo "⚠️  Database status: $DB_STATUS - skipping snapshot"
        fi

    - name: Scale down services (Scale Down method)
      if: github.event.inputs.stop_method == 'scale_down'
      working-directory: infrastructure
      run: |
        echo "⬇️ Scaling down services to minimal resources..."
        
        # Create temporary tfvars with minimal settings
        cat > scale-down.tfvars << EOF
        aws_region = "${{ env.AWS_REGION }}"
        environment = "${{ github.event.inputs.environment }}"
        desired_count = 0
        container_cpu = 256
        container_memory = 512
        EOF
        
        # Apply with minimal resources
        terraform apply -auto-approve \
          -var-file="environments/${{ github.event.inputs.environment }}.tfvars" \
          -var-file="scale-down.tfvars"
        
        echo "✅ Services scaled down to save costs"

    - name: Destroy all infrastructure (Destroy All method)
      if: github.event.inputs.stop_method == 'destroy_all'
      working-directory: infrastructure
      run: |
        echo "🗑️ Destroying all infrastructure..."
        
        terraform destroy -auto-approve \
          -var-file="environments/${{ github.event.inputs.environment }}.tfvars"
        
        echo "✅ All infrastructure destroyed"

    - name: Clean up container images (if destroying all)
      if: github.event.inputs.stop_method == 'destroy_all'
      run: |
        echo "🧹 Cleaning up container images..."
        
        # Delete container images from ECR
        aws ecr batch-delete-image --repository-name guestbook-frontend \
          --image-ids imageTag=latest || true
        aws ecr batch-delete-image --repository-name guestbook-backend \
          --image-ids imageTag=latest || true
        
        echo "✅ Container images cleaned up"

    - name: Calculate cost savings
      run: |
        echo "💰 **Cost Savings:**"
        echo "- ECS Fargate: ~$0.10-0.20/hour → $0.00/hour ✅"
        echo "- RDS t3.micro: ~$0.017/hour → $0.00/hour ✅"
        echo "- ALB: ~$0.025/hour (still running for quick restart)"
        echo "- **Total running cost: ~$0.025/hour (~$0.60/day)**"
        echo ""
        if [ "${{ github.event.inputs.preserve_data }}" = "true" ]; then
          echo "💾 **Data Status:** Safely preserved in RDS snapshots"
        else
          echo "⚠️  **Data Status:** Will be lost when RDS instance is deleted"
        fi

    - name: Update or close demo issue
      uses: actions/github-script@v7
      with:
        script: |
          // Find the demo issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'demo',
            state: 'open'
          });
          
          const demoIssue = issues.data.find(issue => 
            issue.title.includes('Demo Environment Started') && 
            issue.title.includes('${{ github.event.inputs.environment }}')
          );
          
          if (demoIssue) {
            const updateBody = `
            ## Demo Environment: ${{ github.event.inputs.environment }}
            
            **Status:** 🔴 Stopped
            **Stopped:** ${new Date().toISOString()}
            **Stopped by:** @${{ github.actor }}
            **Data Preserved:** ${{ github.event.inputs.preserve_data == 'true' ? '✅ Yes' : '❌ No' }}
            
            ### 💰 Cost Savings
            - **Hourly cost:** $0.15-0.25/hour → $0.025/hour
            - **Daily savings:** ~$3.00-5.40/day
            
            ### 📊 Services Status
            - 🔴 ECS Frontend Service (Stopped)
            - 🔴 ECS Backend Service (Stopped)
            - 🔴 RDS PostgreSQL (Stopped)
            - 🟡 Application Load Balancer (Running - for quick restart)
            
            ${{ github.event.inputs.preserve_data == 'true' ? '### 💾 Data Backup\nYour database data has been preserved in RDS snapshots and will be restored when you restart the demo.' : '### ⚠️ Data Warning\nDatabase data will be lost since data preservation was not selected.' }}
            
            ### 🚀 To Restart Demo
            Use the [Start Demo workflow](https://github.com/${{ github.repository }}/actions/workflows/demo-start.yml)
            `;
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: demoIssue.number,
              title: `🔴 Demo Environment Stopped - ${{ github.event.inputs.environment }}`,
              body: updateBody,
              state: 'closed'
            });
          } else {
            // Create a new issue if no existing one found
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔴 Demo Environment Stopped - ${{ github.event.inputs.environment }}`,
              body: `Demo environment ${{ github.event.inputs.environment }} was stopped on ${new Date().toISOString()} by @${{ github.actor }}`,
              labels: ['demo', 'infrastructure']
            });
          }