name: Simple Deploy

on:
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'demo'
        type: choice
        options:
        - demo
        - dev
        - prod
      terraform_action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.6.0

jobs:
  terraform-plan:
    name: üìã Terraform Plan
    runs-on: ubuntu-latest
    if: github.event.inputs.terraform_action == 'plan' || github.event.inputs.terraform_action == 'apply'
    environment: ${{ github.event.inputs.deploy_environment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: docker-hello-world/infrastructure
      run: terraform init

    - name: Terraform Plan
      working-directory: docker-hello-world/infrastructure
      run: |
        terraform plan \
          -var-file="environments/${{ github.event.inputs.deploy_environment }}.tfvars" \
          -out=tfplan-${{ github.event.inputs.deploy_environment }}

    - name: Upload Terraform Plan
      if: github.event.inputs.terraform_action == 'apply'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.event.inputs.deploy_environment }}
        path: docker-hello-world/infrastructure/tfplan-${{ github.event.inputs.deploy_environment }}
        retention-days: 30

  terraform-apply:
    name: üöÄ Deploy Infrastructure
    needs: [terraform-plan]
    runs-on: ubuntu-latest
    if: github.event.inputs.terraform_action == 'apply'
    environment: ${{ github.event.inputs.deploy_environment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-${{ github.event.inputs.deploy_environment }}
        path: docker-hello-world/infrastructure/

    - name: Terraform Init
      working-directory: docker-hello-world/infrastructure
      run: terraform init

    - name: Terraform Apply
      working-directory: docker-hello-world/infrastructure
      run: terraform apply -auto-approve tfplan-${{ github.event.inputs.deploy_environment }}

  terraform-destroy:
    name: üóëÔ∏è Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event.inputs.terraform_action == 'destroy'
    environment: ${{ github.event.inputs.deploy_environment }}-destroy
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: docker-hello-world/infrastructure
      run: terraform init

    - name: Terraform Destroy
      working-directory: docker-hello-world/infrastructure
      run: |
        terraform destroy -auto-approve \
          -var-file="environments/${{ github.event.inputs.deploy_environment }}.tfvars"