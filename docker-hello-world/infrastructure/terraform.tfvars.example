# Example Terraform Variables File
# Copy this file to terraform.tfvars and customize for your environment
# DO NOT commit terraform.tfvars to git (contains sensitive configuration)

# ==============================================================================
# BASIC CONFIGURATION
# ==============================================================================

# AWS Region where resources will be created
aws_region = "us-east-1"

# Environment name (affects resource naming and configuration)
# Choose: dev, staging, prod, demo
environment = "demo"

# ==============================================================================
# CONTAINER IMAGES
# ==============================================================================
# These should be updated by your CI/CD pipeline with specific image tags

# Frontend container image
# Examples:
# - nginx:alpine (default for testing)
# - 123456789012.dkr.ecr.us-east-1.amazonaws.com/guestbook-frontend:latest
# - 123456789012.dkr.ecr.us-east-1.amazonaws.com/guestbook-frontend:v1.2.3
frontend_image = "nginx:alpine"

# Backend container image  
# Examples:
# - node:18-alpine (default for testing)
# - 123456789012.dkr.ecr.us-east-1.amazonaws.com/guestbook-backend:latest
# - 123456789012.dkr.ecr.us-east-1.amazonaws.com/guestbook-backend:v1.2.3
backend_image = "node:18-alpine"

# ==============================================================================
# COMPUTE RESOURCES (COST OPTIMIZATION)
# ==============================================================================

# Container CPU allocation (1024 = 1 vCPU)
# Options: 256, 512, 1024, 2048, 4096
# Recommendation: Start with 256, scale up based on monitoring
container_cpu = 256

# Container memory allocation (MB)
# Must be compatible with CPU setting (see variables.tf for valid combinations)
# Recommendation: 512MB for demo, 1024MB+ for production
container_memory = 512

# Number of containers to run for each service
# 0 = service stopped (cost savings)
# 1 = single instance (no high availability)
# 2+ = high availability with rolling deployments
desired_count = 1

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================

# RDS instance type
# Options: db.t3.micro, db.t3.small, db.t3.medium, etc.
# Cost: db.t3.micro (~$15/month), db.t3.small (~$30/month)
instance_class = "db.t3.micro"

# Database storage in GB
# Minimum: 20GB, can auto-scale up to 2x this amount
allocated_storage = 20

# Backup retention period (days)
# 0 = no backups, 1-35 = retention period
# Recommendation: 7 for demo, 30+ for production
backup_retention_period = 7

# Multi-AZ deployment for high availability
# false = single AZ (50% cost savings)
# true = multi-AZ (automatic failover, ~2x cost)
multi_az = false

# Enable deletion protection
# false = allow deletion (good for demo/dev)
# true = prevent accidental deletion (required for production)
enable_deletion_protection = false

# Enable Performance Insights for database monitoring
# false = basic monitoring (free)
# true = detailed query analysis (7 days free, then charges apply)
enable_performance_insights = false

# ==============================================================================
# SCALING CONFIGURATION
# ==============================================================================

# Enable auto-scaling (adds complexity)
enable_autoscaling = false

# Auto-scaling limits (only used if enable_autoscaling = true)
min_capacity = 1
max_capacity = 3

# ==============================================================================
# MONITORING AND LOGGING
# ==============================================================================

# CloudWatch log retention (days)
# Shorter retention = lower costs
# Options: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653
log_retention_days = 14

# ==============================================================================
# DEPLOYMENT CONFIGURATION
# ==============================================================================

# Health check grace period (seconds)
# How long to wait after container starts before health checks begin
health_check_grace_period = 60

# ==============================================================================
# COST ESTIMATES WITH THESE SETTINGS
# ==============================================================================
# 
# Monthly Cost Breakdown:
# - ECS Fargate (256 CPU, 512MB, 1 task each): ~$18/month
# - RDS t3.micro (20GB): ~$15/month
# - Application Load Balancer: ~$20/month
# - Data transfer: ~$5-10/month
# - CloudWatch logs: ~$3-5/month
# 
# Total Estimated Cost: ~$60-70/month
# 
# Cost Optimization Tips:
# 1. Set desired_count = 0 when not using (reduces to ~$20/month ALB cost)
# 2. Use Fargate Spot for non-production (up to 70% savings)
# 3. Right-size containers based on actual usage
# 4. Reduce log retention for development environments
# 5. Consider scheduled scaling for predictable traffic patterns